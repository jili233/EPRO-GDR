# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.25)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS LLVMDemangle LLVMSupport LLVMTableGen llvm-tblgen LLVMCore LLVMIRReader LLVMCodeGen LLVMSelectionDAG LLVMAsmPrinter LLVMMIRParser LLVMGlobalISel LLVMBitReader LLVMBitWriter LLVMTransformUtils LLVMInstrumentation LLVMInstCombine LLVMScalarOpts LLVMipo LLVMVectorize LLVMHello LLVMObjCARCOpts LLVMCoroutines LLVMLinker LLVMAnalysis LLVMLTO LLVMMC LLVMMCParser LLVMMCDisassembler LLVMObject LLVMObjectYAML LLVMOption LLVMDebugInfoDWARF LLVMDebugInfoMSF LLVMDebugInfoCodeView LLVMDebugInfoPDB LLVMSymbolize LLVMExecutionEngine LLVMInterpreter LLVMMCJIT LLVMOrcJIT LLVMRuntimeDyld LLVMTarget LLVMX86CodeGen LLVMX86AsmParser LLVMX86Disassembler LLVMX86AsmPrinter LLVMX86Desc LLVMX86Info LLVMX86Utils LLVMAsmParser LLVMLineEditor LLVMProfileData LLVMCoverage LLVMPasses LLVMLibDriver LLVMXRay LTO llvm-ar llvm-config llvm-lto llvm-profdata bugpoint BugpointPasses llvm-dsymutil llc lli llvm-as llvm-bcanalyzer llvm-c-test llvm-cat llvm-cov llvm-cxxdump llvm-cxxfilt llvm-diff llvm-dis llvm-dwarfdump llvm-dwp llvm-extract llvm-link llvm-lto2 llvm-mc llvm-mcmarkup llvm-modextract llvm-nm llvm-objdump llvm-opt-report llvm-pdbdump llvm-readobj llvm-rtdyld llvm-size llvm-split llvm-stress llvm-strings llvm-symbolizer llvm-xray obj2yaml opt sancov sanstats verify-uselistorder yaml2obj)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target LLVMDemangle
add_library(LLVMDemangle SHARED IMPORTED)

# Create imported target LLVMSupport
add_library(LLVMSupport SHARED IMPORTED)

# Create imported target LLVMTableGen
add_library(LLVMTableGen SHARED IMPORTED)

# Create imported target llvm-tblgen
add_executable(llvm-tblgen IMPORTED)

# Create imported target LLVMCore
add_library(LLVMCore SHARED IMPORTED)

# Create imported target LLVMIRReader
add_library(LLVMIRReader SHARED IMPORTED)

# Create imported target LLVMCodeGen
add_library(LLVMCodeGen SHARED IMPORTED)

# Create imported target LLVMSelectionDAG
add_library(LLVMSelectionDAG SHARED IMPORTED)

# Create imported target LLVMAsmPrinter
add_library(LLVMAsmPrinter SHARED IMPORTED)

# Create imported target LLVMMIRParser
add_library(LLVMMIRParser SHARED IMPORTED)

# Create imported target LLVMGlobalISel
add_library(LLVMGlobalISel SHARED IMPORTED)

# Create imported target LLVMBitReader
add_library(LLVMBitReader SHARED IMPORTED)

# Create imported target LLVMBitWriter
add_library(LLVMBitWriter SHARED IMPORTED)

# Create imported target LLVMTransformUtils
add_library(LLVMTransformUtils SHARED IMPORTED)

# Create imported target LLVMInstrumentation
add_library(LLVMInstrumentation SHARED IMPORTED)

# Create imported target LLVMInstCombine
add_library(LLVMInstCombine SHARED IMPORTED)

# Create imported target LLVMScalarOpts
add_library(LLVMScalarOpts SHARED IMPORTED)

# Create imported target LLVMipo
add_library(LLVMipo SHARED IMPORTED)

# Create imported target LLVMVectorize
add_library(LLVMVectorize SHARED IMPORTED)

# Create imported target LLVMHello
add_library(LLVMHello MODULE IMPORTED)

# Create imported target LLVMObjCARCOpts
add_library(LLVMObjCARCOpts SHARED IMPORTED)

# Create imported target LLVMCoroutines
add_library(LLVMCoroutines SHARED IMPORTED)

# Create imported target LLVMLinker
add_library(LLVMLinker SHARED IMPORTED)

# Create imported target LLVMAnalysis
add_library(LLVMAnalysis SHARED IMPORTED)

# Create imported target LLVMLTO
add_library(LLVMLTO SHARED IMPORTED)

# Create imported target LLVMMC
add_library(LLVMMC SHARED IMPORTED)

# Create imported target LLVMMCParser
add_library(LLVMMCParser SHARED IMPORTED)

# Create imported target LLVMMCDisassembler
add_library(LLVMMCDisassembler SHARED IMPORTED)

# Create imported target LLVMObject
add_library(LLVMObject SHARED IMPORTED)

# Create imported target LLVMObjectYAML
add_library(LLVMObjectYAML SHARED IMPORTED)

# Create imported target LLVMOption
add_library(LLVMOption SHARED IMPORTED)

# Create imported target LLVMDebugInfoDWARF
add_library(LLVMDebugInfoDWARF SHARED IMPORTED)

# Create imported target LLVMDebugInfoMSF
add_library(LLVMDebugInfoMSF SHARED IMPORTED)

# Create imported target LLVMDebugInfoCodeView
add_library(LLVMDebugInfoCodeView SHARED IMPORTED)

# Create imported target LLVMDebugInfoPDB
add_library(LLVMDebugInfoPDB SHARED IMPORTED)

# Create imported target LLVMSymbolize
add_library(LLVMSymbolize SHARED IMPORTED)

# Create imported target LLVMExecutionEngine
add_library(LLVMExecutionEngine SHARED IMPORTED)

# Create imported target LLVMInterpreter
add_library(LLVMInterpreter SHARED IMPORTED)

# Create imported target LLVMMCJIT
add_library(LLVMMCJIT SHARED IMPORTED)

# Create imported target LLVMOrcJIT
add_library(LLVMOrcJIT SHARED IMPORTED)

# Create imported target LLVMRuntimeDyld
add_library(LLVMRuntimeDyld SHARED IMPORTED)

# Create imported target LLVMTarget
add_library(LLVMTarget SHARED IMPORTED)

# Create imported target LLVMX86CodeGen
add_library(LLVMX86CodeGen SHARED IMPORTED)

# Create imported target LLVMX86AsmParser
add_library(LLVMX86AsmParser SHARED IMPORTED)

# Create imported target LLVMX86Disassembler
add_library(LLVMX86Disassembler SHARED IMPORTED)

# Create imported target LLVMX86AsmPrinter
add_library(LLVMX86AsmPrinter SHARED IMPORTED)

# Create imported target LLVMX86Desc
add_library(LLVMX86Desc SHARED IMPORTED)

# Create imported target LLVMX86Info
add_library(LLVMX86Info SHARED IMPORTED)

# Create imported target LLVMX86Utils
add_library(LLVMX86Utils SHARED IMPORTED)

# Create imported target LLVMAsmParser
add_library(LLVMAsmParser SHARED IMPORTED)

# Create imported target LLVMLineEditor
add_library(LLVMLineEditor SHARED IMPORTED)

# Create imported target LLVMProfileData
add_library(LLVMProfileData SHARED IMPORTED)

# Create imported target LLVMCoverage
add_library(LLVMCoverage SHARED IMPORTED)

# Create imported target LLVMPasses
add_library(LLVMPasses SHARED IMPORTED)

# Create imported target LLVMLibDriver
add_library(LLVMLibDriver SHARED IMPORTED)

# Create imported target LLVMXRay
add_library(LLVMXRay SHARED IMPORTED)

# Create imported target LTO
add_library(LTO SHARED IMPORTED)

# Create imported target llvm-ar
add_executable(llvm-ar IMPORTED)

# Create imported target llvm-config
add_executable(llvm-config IMPORTED)

# Create imported target llvm-lto
add_executable(llvm-lto IMPORTED)

# Create imported target llvm-profdata
add_executable(llvm-profdata IMPORTED)

# Create imported target bugpoint
add_executable(bugpoint IMPORTED)
set_property(TARGET bugpoint PROPERTY ENABLE_EXPORTS 1)

set_target_properties(bugpoint PROPERTIES
  INTERFACE_LINK_LIBRARIES "LLVMAnalysis;LLVMBitWriter;LLVMCodeGen;LLVMCore;LLVMipo;LLVMIRReader;LLVMInstCombine;LLVMInstrumentation;LLVMLinker;LLVMObjCARCOpts;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMVectorize;-lpthread"
)

# Create imported target BugpointPasses
add_library(BugpointPasses MODULE IMPORTED)

# Create imported target llvm-dsymutil
add_executable(llvm-dsymutil IMPORTED)

# Create imported target llc
add_executable(llc IMPORTED)
set_property(TARGET llc PROPERTY ENABLE_EXPORTS 1)

set_target_properties(llc PROPERTIES
  INTERFACE_LINK_LIBRARIES "LLVMX86CodeGen;LLVMX86AsmPrinter;LLVMX86AsmParser;LLVMX86Desc;LLVMX86Info;LLVMX86Disassembler;LLVMAnalysis;LLVMAsmPrinter;LLVMCodeGen;LLVMCore;LLVMIRReader;LLVMMC;LLVMMIRParser;LLVMScalarOpts;LLVMSelectionDAG;LLVMSupport;LLVMTarget;LLVMTransformUtils;-lpthread"
)

# Create imported target lli
add_executable(lli IMPORTED)
set_property(TARGET lli PROPERTY ENABLE_EXPORTS 1)

set_target_properties(lli PROPERTIES
  INTERFACE_LINK_LIBRARIES "LLVMCodeGen;LLVMCore;LLVMExecutionEngine;LLVMIRReader;LLVMInterpreter;LLVMMC;LLVMMCJIT;LLVMObject;LLVMOrcJIT;LLVMRuntimeDyld;LLVMSelectionDAG;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMX86CodeGen;LLVMX86AsmPrinter;LLVMX86AsmParser;LLVMX86Desc;LLVMX86Info;LLVMX86Disassembler;-lpthread"
)

# Create imported target llvm-as
add_executable(llvm-as IMPORTED)

# Create imported target llvm-bcanalyzer
add_executable(llvm-bcanalyzer IMPORTED)

# Create imported target llvm-c-test
add_executable(llvm-c-test IMPORTED)

# Create imported target llvm-cat
add_executable(llvm-cat IMPORTED)

# Create imported target llvm-cov
add_executable(llvm-cov IMPORTED)

# Create imported target llvm-cxxdump
add_executable(llvm-cxxdump IMPORTED)

# Create imported target llvm-cxxfilt
add_executable(llvm-cxxfilt IMPORTED)

# Create imported target llvm-diff
add_executable(llvm-diff IMPORTED)

# Create imported target llvm-dis
add_executable(llvm-dis IMPORTED)

# Create imported target llvm-dwarfdump
add_executable(llvm-dwarfdump IMPORTED)

# Create imported target llvm-dwp
add_executable(llvm-dwp IMPORTED)

# Create imported target llvm-extract
add_executable(llvm-extract IMPORTED)

# Create imported target llvm-link
add_executable(llvm-link IMPORTED)

# Create imported target llvm-lto2
add_executable(llvm-lto2 IMPORTED)

# Create imported target llvm-mc
add_executable(llvm-mc IMPORTED)

# Create imported target llvm-mcmarkup
add_executable(llvm-mcmarkup IMPORTED)

# Create imported target llvm-modextract
add_executable(llvm-modextract IMPORTED)

# Create imported target llvm-nm
add_executable(llvm-nm IMPORTED)

# Create imported target llvm-objdump
add_executable(llvm-objdump IMPORTED)

# Create imported target llvm-opt-report
add_executable(llvm-opt-report IMPORTED)

# Create imported target llvm-pdbdump
add_executable(llvm-pdbdump IMPORTED)

# Create imported target llvm-readobj
add_executable(llvm-readobj IMPORTED)

# Create imported target llvm-rtdyld
add_executable(llvm-rtdyld IMPORTED)

# Create imported target llvm-size
add_executable(llvm-size IMPORTED)

# Create imported target llvm-split
add_executable(llvm-split IMPORTED)

# Create imported target llvm-stress
add_executable(llvm-stress IMPORTED)
set_property(TARGET llvm-stress PROPERTY ENABLE_EXPORTS 1)

set_target_properties(llvm-stress PROPERTIES
  INTERFACE_LINK_LIBRARIES "LLVMAnalysis;LLVMCore;LLVMSupport;-lpthread"
)

# Create imported target llvm-strings
add_executable(llvm-strings IMPORTED)

# Create imported target llvm-symbolizer
add_executable(llvm-symbolizer IMPORTED)

# Create imported target llvm-xray
add_executable(llvm-xray IMPORTED)

# Create imported target obj2yaml
add_executable(obj2yaml IMPORTED)

# Create imported target opt
add_executable(opt IMPORTED)
set_property(TARGET opt PROPERTY ENABLE_EXPORTS 1)

set_target_properties(opt PROPERTIES
  INTERFACE_LINK_LIBRARIES "LLVMX86CodeGen;LLVMX86AsmPrinter;LLVMX86AsmParser;LLVMX86Desc;LLVMX86Info;LLVMX86Disassembler;LLVMAnalysis;LLVMBitWriter;LLVMCodeGen;LLVMCore;LLVMCoroutines;LLVMipo;LLVMIRReader;LLVMInstCombine;LLVMInstrumentation;LLVMMC;LLVMObjCARCOpts;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMVectorize;LLVMPasses;-lpthread"
)

# Create imported target sancov
add_executable(sancov IMPORTED)

# Create imported target sanstats
add_executable(sanstats IMPORTED)

# Create imported target verify-uselistorder
add_executable(verify-uselistorder IMPORTED)

# Create imported target yaml2obj
add_executable(yaml2obj IMPORTED)

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/LLVMExports-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
